package com.vpk.sprachninja.data.remote.dto

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * The top-level request object sent to the Gemini API.
 */
@Serializable
data class GeminiRequest(
    val contents: List<Content>
)

/**
 * Represents a piece of content in the conversation, which can be multimodal.
 * For our use case, it will contain a single text part.
 */
@Serializable
data class Content(
    val parts: List<Part>
)

/**
 * A single part of the content. We are only using text parts.
 */
@Serializable
data class Part(
    val text: String
)

// endregion

// region Response Data Classes

/**
 * The top-level response object from the Gemini API.
 * We are interested in the 'candidates' list.
 *
 * The @SerialName annotation is used to map the JSON key "candidates" to our
 * Kotlin property name "candidates", even though they are the same in this case.
 * It's good practice for robustness.
 *
 * The @Serializable annotation makes this class processable by Kotlinx Serialization.
 */
@Serializable
data class GeminiResponse(
    val candidates: List<Candidate>?,
    val promptFeedback: PromptFeedback?
)

/**
 * A potential response generated by the model. We typically only care about the first one.
 */
@Serializable
data class Candidate(
    val content: Content?,
    @SerialName("finishReason")
    val finishReason: String?,
    val index: Int?,
    val safetyRatings: List<SafetyRating>?
)

/**
 * A feedback object detailing any issues with the prompt, such as safety blocks.
 */
@Serializable
data class PromptFeedback(
    val safetyRatings: List<SafetyRating>?
)

/**
 * A rating indicating the safety level of a particular category.
 */
@Serializable
data class SafetyRating(
    val category: String?,
    val probability: String?
)
